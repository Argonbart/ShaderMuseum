[gd_resource type="Shader" format=3 uid="uid://dmxowylempx5u"]

[resource]
code = "// Shader type: CanvasItem
shader_type canvas_item;

// Uniforms for mouse input
uniform vec2 iMouse;
uniform vec2 color_rect_size;

// Function to calculate the signed distance to a circle
float sdCircle(vec2 p, float r) {
    return length(p) - r;
}

void fragment() {
    // Use UV coordinates to make the shader relative to the node
    vec2 uv = UV;
    vec2 p = uv * 2.0 - 1.0; // Transform UV to range [-1, 1]

    // Adjust mouse position to align with the ColorRect's center
    vec2 m = (iMouse / color_rect_size) * 2.0 - 1.0; // Normalize mouse position to screen UV space and transform to [-1, 1]

    float d = sdCircle(p, 0.3);

    // Coloring logic
	vec3 col = vec3(0.0, 0.0, 0.0);
    //vec3 col = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65, 0.85, 1.0);
    col *= 1.0 - exp(-6.0 * abs(d));
    col *= 0.8 + 0.2 * cos(150.0 * d);
    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));

    float d_mouse = sdCircle(m, 0.3);
    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d_mouse)) - 0.0025));
    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));

    COLOR = vec4(col, 1.0);
}
"
